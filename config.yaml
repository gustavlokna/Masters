data:
  raw: Data/raw/  
  processed: Data/processed
  preprocessed: "Data/processed/segmented_2.5s_epoch_256hz.npz" # Combined preprocessed data from all subjects
  memd: "Data/processed/memd_segmented_2.5s_epoch_256hz_ALLCHANNELS_64_dir.npz" # Combined MEMD filtered data from all subjects
  psd: Data/processed/PSD_segmented_2.5s_epoch_256hz.npz # Combined PSD features from all subjects
  fs: 256  # Target sampling frequency after downsampling
  epoch_length: 2.5 # Length of each epoch in seconds


#Extracted from file DreamCatcher/DEV/Greedy_algorithm/top2.ipynb from Adin Belsics masters (NOT ZERO INDEXED, if you want to use in python subtract 1)
channels:
  top_64: [1, 6, 8, 9, 43, 44, 61, 65, 66, 67, 79, 82, 91, 92, 93, 94, 101, 102, 103, 110, 111, 119, 121, 125, 135, 144, 145, 146, 155, 156, 165, 175, 185, 187, 189, 194, 199, 203, 207, 208, 209, 210, 216, 218, 219, 221, 228, 229, 231, 232, 233, 234, 235, 236, 237, 240, 244, 246, 248, 249, 250, 251, 255, 256]

  top_40: [6, 8, 9, 44, 61, 65, 66, 79, 92, 93, 94, 102, 103, 110, 111, 119, 121, 144, 155, 185, 199, 203, 207, 208, 209, 216, 218, 219, 221, 228, 229, 232, 233, 237, 240, 246, 248, 250, 251, 256]

  top_30: [6, 8, 44, 61, 65, 66, 79, 92, 93, 102, 103, 111, 121, 144, 155, 185, 199, 208, 216, 218, 219, 228, 229, 232, 233, 237, 248, 250, 251, 256]

  top_20: [6, 8, 44, 66, 79, 102, 103, 111, 144, 155, 199, 208, 219, 229, 232, 233, 237, 248, 251, 256]

memd_params:
  num_directions: 64 # can try 64 or 512 as found in file job2_5 file from Adian Belsics masters
  stop_criteria: "stop" 
  stop_args: [0.075, 0.75, 0.075]
  keep_imfs: 4   # new param


# Configs for imf mixing
mixing: 
  n_imfs: 4,            # number of IMFs to combine
  n_new: 10000,         # number of synthetic samples
  filter_on_sex: False  # whether to enforce same sex across IMFs


psd_bands:
  delta: [0.5, 4]
  theta: [4, 8]
  alpha: [8, 12]
  beta: [13, 30]

label_maps:
  #0_vs_2: {0: 0, 1: null, 2: 1}
  #0_vs_1: {0: 0, 1: 1, 2: null}
  1_vs_2: {0: null, 1: 0, 2: 1}
  #0_vs_1and2: {0: 0, 1: 1, 2: 1}
  #0and1_vs_2: {0: 0, 1: 0, 2: 1}


  